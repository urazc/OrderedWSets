data <- read.table("FSMsStat.txt", header = TRUE, sep = " ", stringsAsFactors = FALSE)
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(SIS_Size = mean(SIS_Size, na.rm = TRUE), .groups = "drop")




tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/SIS_Size.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Size for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(SIS_Size = mean(SIS_Size, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, SIS_Size) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Size)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Size for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Size_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = SIS_Size_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the total number of \n sequences in SISs",
         color = "Algorithm Comparison")+
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(0,100, by = 0.5	))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )


dev.off()	


tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/SIS_Cost.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Cost for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(SIS_Cost = mean(SIS_Cost, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, SIS_Cost) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Cost)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Cost for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Cost_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = SIS_Cost_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the total number of\n inputs in SISs",
         color = "Algorithm Comparison") +
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks =  seq(0,100, by = 5))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()


tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/SIS_Tr.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Tr for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(SIS_Tr = mean(SIS_Tr, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, SIS_Tr) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Tr)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Tr for each algorithm
    data_ratios <- data_wide %>%
        mutate(
           CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Tr_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = SIS_Tr_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the total number of\n transfer inputs in SISs",
         color = "Algorithm Comparison") +
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20))+scale_y_continuous(breaks =  seq(0,100, by = 2))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()	



tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/TS_Size.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing TS_Size for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(TS_Size = mean(TS_Size, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, TS_Size) %>%
        pivot_wider(names_from = Algorithm, values_from = TS_Size)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of TS_Size for each algorithm
    data_ratios <- data_wide %>%
        mutate(
           CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "TS_Size_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = TS_Size_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the total number of\n sequences in TSs",
         color = "Algorithm Comparison") +
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20))+scale_y_continuous(breaks =  seq(0,100, by = 15))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )


dev.off()		

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/TS_Cost.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)


# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing TS_Cost for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(TS_Cost = mean(TS_Cost, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, TS_Cost) %>%
        pivot_wider(names_from = Algorithm, values_from = TS_Cost)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of TS_Cost for each algorithm
    data_ratios <- data_wide %>%
        mutate(
           CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "TS_Cost_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = TS_Cost_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the total number of\n inputs in TSs",
         color = "Algorithm Comparison") +
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20))+scale_y_continuous(breaks =  seq(0,100, by = 15))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()		

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/W_memory.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)


# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing W_Memory for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(W_Memory = mean(W_Memory, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, W_Memory) %>%
        pivot_wider(names_from = Algorithm, values_from = W_Memory)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of W_Memory for each algorithm
    data_ratios <- data_wide %>%
        mutate(
           CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "W_Memory_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = W_Memory_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the memory use \n while deriving W sets",
         color = "Algorithm Comparison") +
    facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20))+scale_y_continuous(breaks =  seq(0,100, by = 15))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()	


tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/W_time.tiff",width=15, height= 5, units='in', compression = 'lzw', res=300)

# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("OWA", "CWA", "MWA"))

# Handle duplicates by summarizing W_Time for each combination of FSMStates, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSMStates, FSMInputs, Algorithm) %>%
    summarize(W_Time = mean(W_Time, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSMStates, FSMInputs, Algorithm, W_Time) %>%
        pivot_wider(names_from = Algorithm, values_from = W_Time)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of W_Time for each algorithm
    data_ratios <- data_wide %>%
                mutate(
           CWA_vs_BOWA = 100*(`CWA` - `OWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `OWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSMStates, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "W_Time_Ratio", -FSMStates, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSMStates, y = W_Time_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
   geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "FSM States",
         y = "Avg. of the gain(%) for \n the time spent \n while deriving W sets",
         color = "Algorithm Comparison") +
        facet_wrap(~FSMInputs, scales = "free_y", labeller = labeller(FSMInputs = function(x) paste("Number of Inputs:", x))) +  # Facet by FSMInputs
      scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20))+scale_y_continuous(breaks = seq(0,100, by = 15))+scale_x_continuous(breaks = seq(0,200, by = 40))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
	
	dev.off()	




library(ggplot2)
library(dplyr)
library(tidyr)

# Read the input data from a space-delimited text file
data <- read.table("C:/Users/auton/source/repos/Paper_OWSet/x64/Release/Benchmarks/benchFsmsStat.txt", header = TRUE, sep = " ")

	
	
tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BSIS_Size.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Size for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(SIS_Size = mean(SIS_Size, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, SIS_Size) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Size)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Size for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Size_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = SIS_Size_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the total number of \n sequences in SISs",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(0,100, by = 5	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()		

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BSIS_Cost.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)	
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Cost for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(SIS_Cost = mean(SIS_Cost, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, SIS_Cost) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Cost)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Cost for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Cost_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = SIS_Cost_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the total number of \n inputs in SISs",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(0,100, by = 10	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )

dev.off()	

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BSIS_Tr.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing SIS_Tr for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(SIS_Tr = mean(SIS_Tr, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, SIS_Tr) %>%
        pivot_wider(names_from = Algorithm, values_from = SIS_Tr)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of SIS_Tr for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "SIS_Tr_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = SIS_Tr_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the total number of \n transfer inputs in SISs",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(0,100, by = 10	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()	

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BTS_Size.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing TS_Size for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(TS_Size = mean(TS_Size, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, TS_Size) %>%
        pivot_wider(names_from = Algorithm, values_from = TS_Size)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of TS_Size for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "TS_Size_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = TS_Size_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the total number of \n sequences in TSs",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(-50,100, by = 20	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()	

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BTS_Cost.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing TS_Cost for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(TS_Cost = mean(TS_Cost, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, TS_Cost) %>%
        pivot_wider(names_from = Algorithm, values_from = TS_Cost)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of TS_Cost for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "TS_Cost_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = TS_Cost_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the total number of \n inputs in TSs",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(-50,100, by = 20	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )
dev.off()	

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BW_Memory.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing W_Memory for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(W_Memory = mean(W_Memory, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, W_Memory) %>%
        pivot_wider(names_from = Algorithm, values_from = W_Memory)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of W_Memory for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / `CWA`,
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / `MWA`,
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "W_Memory_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = W_Memory_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the memory use \n while deriving W sets",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(-50,100, by = 20	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )

dev.off()	

tiff(file= "C:/Users/auton/source/repos/Paper_OWSet/x64/Release/BW_Time.tiff",width=15, height= 10, units='in', compression = 'lzw', res=300)
# Ensure the Algorithm column is a factor with levels for comparison
data$Algorithm <- factor(data$Algorithm, levels = c("BOWA", "CWA", "MWA"))

# Handle duplicates by summarizing W_Time for each combination of FSM_ID, FSMInputs, and Algorithm
data_summarized <- data %>%
    group_by(FSM_ID, FSMInputs, Algorithm) %>%
    summarize(W_Time = mean(W_Time, na.rm = TRUE), .groups = "drop")

# Calculate pairwise ratios function using pivot_wider()
calculate_ratios <- function(data) {
    # Reshape the data to wide format using pivot_wider()
    data_wide <- data %>%
        select(FSM_ID, FSMInputs, Algorithm, W_Time) %>%
        pivot_wider(names_from = Algorithm, values_from = W_Time)
    
    # Check for missing values in the wide data and remove rows with NAs
    data_wide <- data_wide %>% filter(complete.cases(.))
    
    # Calculate the pairwise ratios of W_Time for each algorithm
    data_ratios <- data_wide %>%
        mutate(
            CWA_vs_BOWA = 100*(`CWA` - `BOWA`) / (`CWA`+0.01),
            MWA_vs_BOWA = 100*(`MWA` - `BOWA`) / (`MWA`+0.01),
        ) %>%
        # Select the relevant columns and gather back to long format
        select(FSM_ID, FSMInputs, CWA_vs_BOWA, MWA_vs_BOWA) %>%
        gather(key = "Algorithm_Ratio", value = "W_Time_Ratio", -FSM_ID, -FSMInputs)
    
    return(data_ratios)
}

# Calculate the pairwise ratios
data_ratios <- calculate_ratios(data_summarized)

# Create the ggplot line plot
ggplot(data_ratios, aes(x = FSM_ID, y = W_Time_Ratio, group = Algorithm_Ratio, color = Algorithm_Ratio, linetype = Algorithm_Ratio, shape = Algorithm_Ratio)) +
    geom_line(size = 1) +  # Line with different types
    geom_point(size = 1.5) +  # Points (tick marks) on the lines
    labs(,
         x = "",
         y = "The gain(%) for \n the time spent \n while deriving W sets",
         color = "Algorithm Comparison")+
    scale_color_manual(values = c("CWA_vs_BOWA" = "red", "MWA_vs_BOWA" = "blue"), 
                       labels = c("CWA_vs_BOWA" = "((CWA-BOWA)*100)/CWA", "MWA_vs_BOWA" = "((MWA-BOWA)*100)/MWA"),
                       guide = guide_legend(override.aes = list(shape = 16))) +  # Custom legend labels and overrides
    scale_linetype_manual(values = c("CWA_vs_BOWA" = "solid", "MWA_vs_BOWA" = "dashed"),
                          guide = "none") +  # Remove duplicate line legend
    scale_shape_manual(values = c("CWA_vs_BOWA" = 16, "MWA_vs_BOWA" = 13),
                       guide = "none") +  # Remove duplicate shape legend
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
    theme(legend.text = element_text(size = 20)) + 
    theme(legend.title = element_blank()) + 
    guides(alpha = "none") + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
    theme(legend.position = "top") + 
    theme(strip.text.x = element_text(size = 20)) + 
    theme(axis.text.y = element_text(face = "bold", color = "black", size = 20)) + 
    theme(axis.text.x = element_text(face = "bold", color = "black", size = 20)) +scale_y_continuous(breaks = seq(-100,100, by = 20	))+theme(
        axis.title.x = element_text(size = 22, face = "bold", color="darkgrey"),  # Enlarge x-axis label
        axis.title.y = element_text(size = 22, face = "bold", color="darkgrey")   # Enlarge y-axis label
    )

dev.off()	
